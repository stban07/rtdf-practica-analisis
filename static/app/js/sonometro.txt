//microfono
class Microphone{
    constructor(fftSize){
        this.initialized = false;
        navigator.mediaDevices.getUserMedia({audio:true})
        .then(function(stream){
            this.audioContext = new AudioContext();
            this.microphone = this.audioContext.createMediaStreamSource(stream);
            this.analyser = this.audioContext.createAnalyser();
            this.analyser.fftSize = fftSize;
            const bufferLength = this.analyser.frequencyBinCount;
            this.dataArray = new Uint8Array(bufferLength);
            this.microphone.connect(this.analyser);
            this.initialized = true;
        }.bind(this)).catch(function(err){ 
            alert(err);
        });
        
    }
    getSample(){
        this.analyser.getByteTimeDomainData(this.dataArray);
        let normSamples = [...this.dataArray].map(e => e/128 - 1);
        return normSamples;
        
    }
    getVolume(){
        this.analyser.getByteTimeDomainData(this.dataArray);
        let normSamples = [...this.dataArray].map(e => e / 128 - 1);
        let sum = 0;
        for (let i = 0; i < normSamples.length; i++){
            sum+= normSamples[i]* normSamples[i];
        }
        let volume = Math.sqrt(sum / normSamples.length);
        return volume;
        
    }
}



//visualizer
function main(){
    const canvas = document.getElementById('myCanvas');
    const ctx = canvas.getContext('2d');
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;


    class Bar {
        constructor(x, y, width, height, color, index) {
            this.x = x;
            this.y = y;
            this.width = width;
            this.height = height;
            this.color = color;
            this.index = index;
        }
        update(micInput){
            const sound = micInput * 1000;
            if (sound > this.height){
                this.height = sound;
            }else{
                this.height -= this.height * 0.03;
            }
        }

        draw(context, volume){
            context.strokeStyle = this.color;
            context.save();
            context.translate(0, 0);
            context.rotate(this.index * 0.3); //3
            context.scale(1+ volume * 0.2,1 + volume * 0.2);

            context.beginPath();
            context.moveTo(this.x, this.y);
            context.lineTo(this.y, this.height);
            context.stroke();

            /context.rotate(this.index * 0.3); //3
            //context.strokeRect(this.y + this.index * 1.5, this.height, 
              //  this.height/2, this.height);
            context.beginPath();
            context.arc(this.x + this.index * 2.5,this.y, this.height * 0.5,
               0, Math.PI * 2);
                // context.stroke();
            
            context.restore();
        }

    }
    const fftSize = 1024; // 32 -64 - 128 - 256 - 512 - 1024 - 2048 - 4096 - 8192 - 16384 - 32768
    const microphone = new Microphone(fftSize);
    let bars=[];
    let barWidth = canvas.width/(fftSize/2);
    function createBars(){
        for (let i = 0; i < (fftSize/2); i++){
            let color = 'hsl(' + i * 2 +', 100%, 50%)';
            bars.push(new Bar(0, i * 0.5, 5, 20, color, i));
            //i * barWidth, canvas.height/2
        }
    }
    createBars();
    console.log(bars);
    //let angle = 0;
    function animate(){
        if (microphone.initialized){
            ctx.clearRect(0, 0, canvas.width, canvas.height); 
            // genera muestras de audio desde el micrófono
            const samples = microphone.getSample();
            const volume  = microphone.getVolume();
            // barras animadas basadas en datos de micrófono
            //angle -= 0.001 + (volume * 0.05); // esta propiedad hace que gire
            ctx.save();
            ctx.translate(canvas.width/2, canvas.height/2); // lo posiciona al centro
            //ctx.rotate(angle);
            bars.forEach(function(bar, i){
                bar.update(samples[i]);
                bar.draw(ctx, volume);
            });
            ctx.restore();
        }
        requestAnimationFrame(animate);
    }
    animate();
}
